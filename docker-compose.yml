version: "3.8"

services:
  llamapress:
    image: kody06/llamapress-simple:0.2.2          # <â€” pre-built tag
    env_file: .env                           # read secrets from this file
    environment:
      - RAILS_ENV=development
      - BOOTSNAP_CACHE_DIR=/rails/tmp/cache/bootsnap
    volumes:
      - rails_storage:/rails/storage         # ActiveStorage local files
      - ./llamapress/rails/app:/rails/app
      - ./llamapress/rails/config/routes.rb:/rails/config/routes.rb
      - ./llamapress/rails/db:/rails/db
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails db:prepare && bundle exec rails s -b 0.0.0.0"
    ports:
      - "3000:3000"                            # http://server_ip/
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - llama-network

  llamabot:
    image: kody06/llamabot:0.2.14b
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    env_file:
      - .env
    command: bash -c "python init_pg_checkpointer.py --uri $DB_URI && uvicorn main:app --host 0.0.0.0 --port 8000"
    # command: bash -c "cd /app && uvicorn app.main:app --host 0.0.0.0 --port 8000"
    # command: bash -c "tail -f /dev/null"
    # command: bash -c "python init_pg_checkpointer.py --uri $DB_URI && uvicorn main:app --host 0.0.0.0 --port 8000"
    volumes:
      - ./app:/app/app
      - ./llamapress/rails:/app/app/rails
      - auth_data:/app/auth.json
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - llama-network

  db:
    image: postgres:16
    environment:
      POSTGRES_DB:      llamapress_production
      POSTGRES_USER:    postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - llama-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d llamapress_production"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes: [redis_data:/data]
    restart: unless-stopped
    networks:
      - llama-network
      
volumes:
  postgres_data:
  redis_data:
  rails_storage:
  auth_data:
  
# Declare the external network
networks:
  llama-network:
    name: llama-network